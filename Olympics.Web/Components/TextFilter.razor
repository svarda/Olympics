@using Olympics.Web
@using System.Timers;
@inject IStringLocalizer<TextFilter> localizer
@inject IMedalFilters Filters
@implements IDisposable

Filter by:
<input type="text" class="form-input" autofocus @bind-value="FilterText" @bind-value:event="oninput" />
<button class="btn btn-danger" @onclick="@(() => FilterText = string.Empty)">@localizer["Clear"]</button>
<div>
    @localizer["FilterOn"]:
</div>
<select class="form-select w-25" @bind="SelectedColumn">
    @foreach (MedalFilterColumns column in (MedalFilterColumns[])Enum.GetValues(typeof(MedalFilterColumns))) {
        <option @attributes="Selected(column)" value="@((int)column)">@(column.ToString())</option>
    }
</select>

@code {
    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }
    
    const int DebounceMs = 300;
    Timer? timer;

    protected override void OnInitialized()
    {
        filterText = Filters.FilterText;
        selectedColumn = (int)(Filters.FilterColumn);
        base.OnInitialized();
    }

    private IEnumerable<KeyValuePair<string, object>> Selected(MedalFilterColumns column) {
        if ((int)column == selectedColumn)
        {
            return new[] { new KeyValuePair<string, object>("selected", (object)"selected") };
        }
        return Enumerable.Empty<KeyValuePair<string, object>>();
    }

    private int selectedColumn;

    private int SelectedColumn
    {
        get => selectedColumn;
        set
        {
            if (value != selectedColumn)
            {
                selectedColumn = value;
                Filters.FilterColumn = (MedalFilterColumns)selectedColumn;
                FilterText = string.Empty;
            }
        }
    }

    private string? filterText;

    private string? FilterText
    {
        get => filterText?.ToLower();
        set
        {
            if (value != filterText)
            {
                filterText = value;
                timer?.Dispose();
                timer = new(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }

    private async void NotifyTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        timer?.Dispose();
        timer = null;
        if (Filters.FilterText != filterText)
        {
            Filters.FilterText = filterText?.Trim();
            if (Wrapper is not null)
            {
                await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
            }
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
        timer = null;
    }
}
